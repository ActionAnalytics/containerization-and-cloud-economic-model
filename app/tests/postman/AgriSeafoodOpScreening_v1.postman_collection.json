{
	"info": {
		"_postman_id": "6c18f6ec-8832-467e-b09a-e5409034ea49",
		"name": "AgriSeafoodOpScreening_v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search Forms",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b556d45-a4fd-4c4a-8682-1b3584055b41",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/forms?slug=agri&public=true&active=true&name=agriculture&keyword=seafood",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"forms"
					],
					"query": [
						{
							"key": "slug",
							"value": "agri"
						},
						{
							"key": "public",
							"value": "true"
						},
						{
							"key": "active",
							"value": "true"
						},
						{
							"key": "name",
							"value": "agriculture"
						},
						{
							"key": "keyword",
							"value": "seafood"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Current Form Definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7d7e354-e268-4724-915a-6178c7c6477f",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('metadata');",
							"    pm.expect(jsonData.metadata).to.have.property('slug');",
							"    pm.expect(jsonData.metadata.slug).to.equal(pm.collectionVariables.get('slug'));",
							"    pm.collectionVariables.set('formVersionId',jsonData.versions[0].formVersionId);",
							"    pm.collectionVariables.set('formDefinition', JSON.stringify(jsonData));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Operation Types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36081b18-e149-48ce-aaea-887b245cae3e",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
							"    pm.collectionVariables.set('operationTypes', jsonData);",
							"    jsonData.every(x => ['AGRICULTURE','SEAFOOD'].includes(x.type));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/types",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"types"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52e523c4-b0ab-4dd0-828b-f877fe340bf4",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type', 'SEAFOOD');",
							"    pm.expect(jsonData).to.have.property('operationType');",
							"    pm.expect(jsonData.operationType.type).to.equal(jsonData.type);",
							"    pm.collectionVariables.set('submissionId', jsonData.submissionId);",
							"    pm.collectionVariables.set('confirmationId', jsonData.confirmationId);",
							"    pm.collectionVariables.set('submission', jsonData);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"attestation\": {\n\t\t\"guidelinesRead\": true,\n\t\t\"assessmentCompleted\": true,\n\t\t\"developedPlan\": true,\n\t\t\"protectionSignage\": true,\n\t\t\"workerContactPersonnel\": true,\n\t\t\"commonAreaDistancing\": true,\n\t\t\"sleepingAreaType\": \"SHARED\",\n\t\t\"sharedSleepingPerRoom\": 7,\n\t\t\"sharedSleepingDistancing\": true,\n\t\t\"selfIsolateUnderstood\": true,\n\t\t\"selfIsolateAccommodation\": true,\n\t\t\"laundryServices\": true,\n\t\t\"wasteManagementGloves\": true,\n\t\t\"wasteManagementSchedule\": true,\n\t\t\"wasteManagementBags\": true,\n\t\t\"handWashingStations\": true,\n\t\t\"handWashingSoapWater\": true,\n\t\t\"handWashingWaterless\": true,\n\t\t\"handWashingPaperTowels\": true,\n\t\t\"handWashingSignage\": true,\n\t\t\"distancingMaintained\": true,\n\t\t\"distancingFaceShields\": true,\n\t\t\"disinfectingSchedule\": true,\n\t\t\"educationSignage\": true,\n\t\t\"educationContactPersonnel\": true,\n\t\t\"trainingCovid19\": true,\n\t\t\"trainingEtiquette\": true,\n\t\t\"trainingLocations\": true,\n\t\t\"trainingFirstAid\": true,\n\t\t\"trainingReporting\": true,\n\t\t\"mealsDistancing\": true,\n\t\t\"mealsDishware\": true,\n\t\t\"mealsDishwashing\": true,\n\t\t\"infectionSeparation\": true,\n\t\t\"infectionSymptoms\": true,\n\t\t\"infectionHeathLinkBC\": true,\n\t\t\"infectionSanitization\": true,\n\t\t\"infectionAccommodation\": true,\n\t\t\"infectedFeeding\": true,\n\t\t\"infectedHousekeeping\": true,\n\t\t\"infectedWaste\": true,\n\t\t\"certifyAccurateInformation\": true,\n\t\t\"agreeToInspection\": true,\n\t\t\"transportationSingleOccupant\": true,\n\t\t\"transportationBusesVans\": true,\n\t\t\"transportationTrucksCars\": true,\n\t\t\"transportationHelicopter\": true,\n\t\t\"transportationTravelPod\": true,\n\t\t\"transportationCleaningDistancing\": true\n\t},\n\t\"business\": {\n\t\t\"name\": \"ZZ Smoke Testing\",\n\t\t\"orgBookId\": null,\n\t\t\"addressLine1\": \"1234 Here St\",\n\t\t\"addressLine2\": null,\n\t\t\"city\": \"Saanich\",\n\t\t\"province\": \"BC\",\n\t\t\"postalCode\": \"ABCDEF\"\t\n\t},\n\t\"contacts\":[\n\t\t{\n\t\t\t\"contactType\": \"PRIMARY\",\n\t\t\t\"firstName\": \"Jane\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"phone1\": \"1234567890\",\n\t\t\t\"phone2\": \"\",\n\t\t\t\"email\": \"jane@doe.com\"\n\t\t},\n\t    {\t\t\t\n\t\t\t\"contactType\": \"COVID_COORDINATOR\",\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"lastName\": \"D'oh\",\n\t\t\t\"phone1\": \"0987654321\",\n\t\t\t\"phone2\": \"\",\n\t\t\t\"email\": \"john@doh.com\"\n\t\t}\n\t],\n\t\"location\": {\n\t\t\"startDate\": \"2020-05-10\",\n\t\t\"endDate\": \"2020-07-30\",\n\t\t\"city\": \"Victoria, BC\",\n\t\t\"cityLatitude\": null,\n\t\t\"cityLongitude\": null,\n\t\t\"numberOfWorkers\": 10,\n\t\t\"accTents\": true,\n\t\t\"tentDetails\": \"Tents pitched on motel parking lot\",\n\t\t\"accMotel\": true,\n\t\t\"motelName\": \"Heartbreak Hotel\",\n\t\t\"motelAddressLine1\": \"2345 Everywhere\",\n\t\t\"motelAddressLine2\": \"\",\n\t\t\"motelCity\": \"Victoria\",\n\t\t\"motelProvince\": \"BC\",\n\t\t\"motelPostalCode\": \"123123\",\n\t\t\"accWorkersHome\": true\n\t},\n\t\"type\": \"SEAFOOD\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "239fd377-72b7-44b3-857f-a22a2e0a7ce3",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type');",
							"    pm.expect(jsonData).to.have.property('operationType');",
							"    pm.expect(jsonData.operationType.type).to.equal(jsonData.type);",
							"",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.operationType.type).to.equal(pm.collectionVariables.get('submission').type);",
							"",
							"    pm.collectionVariables.set('formVersionId', jsonData.formVersionId);",
							"    pm.collectionVariables.set('operationType', jsonData.operationType.type);",
							"    pm.collectionVariables.set('operationTypeDisplay', jsonData.operationType.display);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Submissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd8d50d1-7b02-4c94-a2ac-dad7dcfdf806",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type');",
							"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get('operationTypeDisplay'));",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions?version={{formVersionId}}&city=Vic&business=ZZ&confirmationId={{confirmationId}}&type={{operationType}}&tiny=true",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					],
					"query": [
						{
							"key": "version",
							"value": "{{formVersionId}}"
						},
						{
							"key": "city",
							"value": "Vic"
						},
						{
							"key": "business",
							"value": "ZZ"
						},
						{
							"key": "confirmationId",
							"value": "{{confirmationId}}"
						},
						{
							"key": "type",
							"value": "{{operationType}}"
						},
						{
							"key": "tiny",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status (with notes)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53bc4cb2-98b5-4bf2-afa3-7cc839fd5b8b",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.not.be.null;",
							"    pm.expect(jsonData.code).to.equal('ASSIGNED');",
							"    pm.expect(jsonData.notes).to.be.an('array');",
							"    pm.expect(jsonData.notes).to.have.lengthOf(1);",
							"    pm.expect(jsonData.notes[0].note).to.equal('Status level note for smoke testing.')",
							"    pm.collectionVariables.set('submissionStatusId', jsonData.submissionStatusId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"Jason Sherman\",\n\t\"assignedToEmail\": \"jsherman@parcsystems.ca\",\n\t\"actionDate\": \"2020-06-01\",\n\t\"notes\": [\n\t\t{\n\t\t\t\"note\": \"Status level note for smoke testing.\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status (with invalid classification)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e629d57-33b3-4be9-aef0-97b9d4226d52",
						"exec": [
							"pm.test(\"422 response\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"COMPLETED\",\n\t\"assignedTo\": \"Jason Sherman\",\n\t\"assignedToEmail\": \"jsherman@parcsystems.ca\",\n\t\"actionDate\": \"2020-06-01\",\n\t\"notes\": [\n\t\t{\n\t\t\t\"note\": \"Status level note for smoke testing.\"\n\t\t}\n\t],\n\t\"classification\": \"This is a bad classification value\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Statuses",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97ce30db-3522-4eb6-b1c4-369e0c5132ef",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Added status is first in list\", function () {",
							"    // assumes this is run after Add Status (with notes)",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"ME!\",\n\t\"notes\": [{\"note\": \"voila!\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Submission Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f032968-c168-4c75-803b-4869cbd18f1e",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.note).to.equal('Submission level note for smoke testing.');",
							"    pm.collectionVariables.set('submissionNoteId', jsonData.noteId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"Submission level note for smoke testing.\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7e14a4b-cf78-4a39-882c-74f448999a84",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Added note is first in list\", function () {",
							"    // assumes this is run after Add Submission Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.submissionId).to.not.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.noteId).to.equal(pm.collectionVariables.get('submissionNoteId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"this note is for the submission\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f307d86-51f2-4f38-b6df-5cd27aa27b47",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"    pm.expect(jsonData.submissionId).to.be.null;",
							"    pm.expect(jsonData.note).to.equal('Additional Status level note.');",
							"    pm.collectionVariables.set('statusNoteId', jsonData.noteId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a22b1488-6186-49aa-9696-3265bc96dc26",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"Additional Status level note.\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses/{{submissionStatusId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses",
						"{{submissionStatusId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Status Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69ccfcc4-307f-4ed4-91fa-e9db847166be",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Note belongs to status\", function () {",
							"    // assumes this is run after Add Status Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.submissionId).to.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.not.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"    pm.expect(jsonData.noteId).to.equal(pm.collectionVariables.get('statusNoteId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"ME!\",\n\t\"notes\": [{\"note\": \"voila!\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses/{{submissionStatusId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses",
						"{{submissionStatusId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Status Codes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c233abfd-c2ab-4899-9db2-6b3a703c2808",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Items are status codes\", function () {",
							"    // assumes this is run after Add Status Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData).to.have.property('display');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('nextCodes');",
							"    pm.expect(jsonData.code).to.not.be.null;",
							"    pm.expect(jsonData.display).to.not.be.null;",
							"    pm.expect(jsonData.enabled).to.not.be.null;",
							"    pm.expect(jsonData.nextCodes).to.not.be.null;",
							"    pm.expect(jsonData.enabled).to.be.an('boolean');",
							"    pm.expect(jsonData.nextCodes).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current/statusCodes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current",
						"statusCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Status Codes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8894148a-a764-4b6c-934b-0c329cf796db",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6eeadb20-db38-47b5-8bb4-faa1d3bee8d8",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"code\": \"SUBMITTED\",\n        \"display\": \"Submitted\",\n        \"enabled\": true,\n        \"nextCodes\": [\"ASSIGNED\",\"COMPLETED\"]\n    },\n    {\n        \"code\": \"ASSIGNED\",\n        \"display\": \"Assigned\",\n        \"enabled\": true,\n        \"nextCodes\": [\"COMPLETED\"],\n        \"allowedClassifications\":[\"OK\"]\n    },\n    {\n        \"code\": \"COMPLETED\",\n        \"display\": \"Completed\",\n        \"enabled\": true,\n        \"nextCodes\": [],\n        \"allowedClassifications\":[\"Pass\",\"Fail\"]\n    },\n    {\n        \"code\": \"SMOKE_TEST_STATUS_A\",\n        \"display\": \"Smoke test Status A (enabled)\",\n        \"enabled\": true,\n        \"nextCodes\": [\"COMPLETED\",\"SMOKE_TEST_STATUS_B\"]\n    },\n    {\n        \"code\": \"SMOKE_TEST_STATUS_B\",\n        \"display\": \"Smoke test Status B (not enabled)\",\n        \"enabled\": false,\n        \"nextCodes\": [\"COMPLETED\",\"SMOKE_TEST_STATUS_A\",\"ONLY_REAL_CODES_ARE_ADDED\"]\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current/statusCodes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current",
						"statusCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Submission",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4e525c44-22d0-419e-8206-469f377ce685",
						"exec": [
							"var submission = pm.collectionVariables.get('submission');",
							"console.log(submission);",
							"var data = submission;",
							"data.location.city='Victoria, TX';",
							"data.business.name='ZZ Smoke Testing 2.0';",
							"data.contacts[0].email='first@contact.ca';",
							"data.contacts[1].email='second@contact.ca';",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedSubmission\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8591cded-4a39-4a7b-b17c-4f5f67879b1a",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the updated item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    ",
							"    pm.expect(jsonData.location.city).to.equal('Victoria, TX');",
							"    pm.expect(jsonData.business.name).to.equal('ZZ Smoke Testing 2.0');",
							"    pm.expect(jsonData.contacts[0].email).to.equal('first@contact.ca');",
							"    pm.expect(jsonData.contacts[1].email).to.equal('second@contact.ca');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedSubmission}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Form Definition",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "13a4f6a9-f20e-49c3-af92-b31a90d7d4d3",
						"exec": [
							"var formDefinition = pm.collectionVariables.get('formDefinition');",
							"console.log(formDefinition);",
							"var data = JSON.parse(formDefinition);",
							"data.description = 'Description updated';",
							"data.metadata.name = 'Agriculture/Seafood v2';",
							"data.versions = [",
							"    {",
							"        changes: 'this is a new version', ",
							"        statusCodes: [",
							"            {code: 'A', display: 'Aa', enabled: true, nextCodes: ['B'], allowedClassifications: [\"Good\", \"Bad\", \"Ugly\"]},",
							"            {code: 'B', display: 'Bb', enabled: true, nextCodes: ['A']}",
							"            ]",
							"    }];",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedFormDefinition\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fe17cf7d-e98f-4c94-992d-8038d056d283",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.description).to.equal('Description updated');",
							"    pm.expect(jsonData.metadata.name).to.equal('Agriculture/Seafood v2');",
							"    pm.expect(jsonData.metadata.slug).to.equal(pm.collectionVariables.get('slug'));",
							"    pm.expect(jsonData.versions[0].formVersionId).to.be.above(pm.collectionVariables.get('formVersionId'));",
							"    pm.expect(jsonData.versions[0].statusCodes[0].code).to.equal('A');",
							"    ",
							"    pm.collectionVariables.set('formVersionId',jsonData.versions[0].formVersionId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedFormDefinition}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2fee333-77a5-49e9-b23c-b05e9c975dd5",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf.at.least(2);",
							"});",
							"pm.test(\"Returns the correct items\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('config');",
							"    pm.expect(jsonData.config).to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Setting confirmationEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ef5da23-37af-4161-877b-c69e76007d63",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('config');",
							"    pm.expect(jsonData.config).to.be.an('object');",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.collectionVariables.set('confirmationEmail', JSON.stringify(jsonData));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Setting confirmationEmail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2ebb607e-e1b2-4cb0-adb8-a07b20c26e30",
						"exec": [
							"var confirmationEmail = pm.collectionVariables.get('confirmationEmail');",
							"console.log(confirmationEmail);",
							"var data = JSON.parse(confirmationEmail);",
							"data.enabled = false;",
							"data.config.to = 'newem@il.com';",
							"data.config.subject ='Ignore this please';",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedConfirmationEmail\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c7c62998-1e98-457e-b5fb-6eea766a87b3",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.expect(jsonData.enabled).to.equal(false);",
							"    pm.expect(jsonData.config.to).to.equal('newem@il.com');",
							"    pm.expect(jsonData.config.subject).to.equal('Ignore this please');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedConfirmationEmail}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Setting confirmationEmail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f0127f08-30c4-42f9-93dd-2c600a06e560",
						"exec": [
							"var confirmationEmail = pm.collectionVariables.get('confirmationEmail');",
							"console.log(confirmationEmail);",
							"var data = JSON.parse(confirmationEmail);",
							"pm.collectionVariables.set(\"resetConfirmationEmail\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2eb3ba2b-6b2a-4d8d-8c12-442314959baa",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.expect(jsonData.enabled).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{resetConfirmationEmail}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission PDF",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/pdf",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"pdf"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ea336b13-c9cd-428b-8b5b-99104622ea69",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.deleted).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Submissions (Deleted)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4c821ab3-5e5d-4604-a7c8-0b802106c3de",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.deleted).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions?deleted=true&confirmationId={{confirmationId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					],
					"query": [
						{
							"key": "deleted",
							"value": "true"
						},
						{
							"key": "confirmationId",
							"value": "{{confirmationId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJrdFJRN3VLZ3hYVU91cjdiaDRseGl1TGlUdVhzM3FyZEpzZFBnLTdvY1FnIn0.eyJqdGkiOiI5NjRjMDRiYy0wZGMxLTRkZDEtODY0Ni1kZjhkYmVmMDYwZjkiLCJleHAiOjE1OTEzOTgzOTAsIm5iZiI6MCwiaWF0IjoxNTkxMzk4MDkwLCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvY3AxcWx5MmQiLCJhdWQiOlsiY29tZm9ydCIsImNvbWZvcnQtZnJvbnRlbmQiLCJjb21mb3J0LWZyb250ZW5kLWxvY2FsIiwiY29tZm9ydC1mb3Jlc3RyeXNlY3Rvcm9wc2NyZWVuaW5nIiwiY29tZm9ydC10ZXN0Y2FzZSIsImNvbWZvcnQtbWluZXNvcGVyYXRvcnNjcmVlbmluZyIsImNvbWZvcnQtYWdyaXNlYWZvb2RvcHNjcmVlbmluZyJdLCJzdWIiOiI2OTM4NDVmZS05OGZmLTRjNzEtOGEwOS04NWEzNDYwZGQzNzIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjb21mb3J0LWZyb250ZW5kLWxvY2FsIiwibm9uY2UiOiI4M2VkMWI2Ny05OGQ2LTRlYTctYTRjYS00NjY2YTA2Njc5YTkiLCJhdXRoX3RpbWUiOjE1OTEzOTc1OTMsInNlc3Npb25fc3RhdGUiOiJhOWNhMDNjZi03NGEzLTRhMWYtOGY4MC01YWZiNGU1MmY4YjIiLCJhY3IiOiIwIiwicmVzb3VyY2VfYWNjZXNzIjp7ImNvbWZvcnQtZm9yZXN0cnlzZWN0b3JvcHNjcmVlbmluZyI6eyJyb2xlcyI6WyJlZGl0b3IiLCJ2aWV3ZXIiLCJhZG1pbiIsInJldmlld2VyIl19LCJjb21mb3J0LXRlc3RjYXNlIjp7InJvbGVzIjpbImVkaXRvciIsInZpZXdlciIsImFkbWluIiwicmV2aWV3ZXIiXX0sImNvbWZvcnQtZnJvbnRlbmQtbG9jYWwiOnsicm9sZXMiOlsiRnJvbnRlbmQgRGV2ZWxvcGVyIiwiZGV2ZWxvcGVyIl19LCJjb21mb3J0LW1pbmVzb3BlcmF0b3JzY3JlZW5pbmciOnsicm9sZXMiOlsidmlld2VyIiwiZWRpdG9yIiwiYWRtaW4iLCJyZXZpZXdlciJdfSwiY29tZm9ydC1hZ3Jpc2VhZm9vZG9wc2NyZWVuaW5nIjp7InJvbGVzIjpbImVkaXRvciIsInZpZXdlciIsImFkbWluIiwicmV2aWV3ZXIiXX0sImNvbWZvcnQiOnsicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19fSwic2NvcGUiOiJvcGVuaWQgY29tZm9ydC1mcm9udGVuZCBjb21mb3J0IGNvbWZvcnQtZnJvbnRlbmQtbG9jYWwiLCJuYW1lIjoiSmFzb24gU2hlcm1hbiIsInByZWZlcnJlZF91c2VybmFtZSI6ImpzaGVybWFuQGlkaXIiLCJlbWFpbCI6ImpzaGVybWFuQHBhcmNzeXN0ZW1zLmNhIn0.HTfHjmIcoX_1RCDjGXKQPuAv9FtHbr4H3o5eCGP-daQ7IRYgit4YsHmDojNvLK-oq79Tc4eD7z6DdpcXg5as5yd-Pmc2hakkX30bxY9T71BOhGy9L5HiYLniFYmolHmX68hUW_o3NtQ9iZzXwQ7im2UlTzjJ6BfInVPMdah1UNJmb98rlqhqimqy71Nwd7JL8hGJiJOsrWBn1mkqUHSS2Mo0eGElBkjLaQfAJGyox-dQ406JwRHXFjinVKDr0S3AYcVY2QnXD5cSH6tkFpYdXMW1PNRqtHBHxCnJc7AeiYljRuH27_IQB-C0FP7_YMdc5ufmUZHNwg4Q4GBeVnKIhA",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fccb6c69-2345-4790-a5d9-f2e4088618eb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "075a7124-7f3a-4538-bd8e-016a787a42cc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8db8b9ee-ab4e-43d9-aaaa-1b90f5866567",
			"key": "host",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"id": "e70f27f0-e359-40b6-8a1d-78793c4eca6c",
			"key": "path",
			"value": "app",
			"type": "string"
		},
		{
			"id": "5a4a9ac9-742d-4ba3-9645-12ecc43c2a0f",
			"key": "slug",
			"value": "agriseafoodopscreening",
			"type": "string"
		},
		{
			"id": "9d22732e-dc89-490a-adf6-3bf2683324f2",
			"key": "formDefinition",
			"value": "{\"formId\":\"daa5c4c9-d49c-45b8-9dcc-d1f9d5c3e358\",\"description\":\"Description updated\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:02.319Z\",\"metadata\":{\"formId\":\"daa5c4c9-d49c-45b8-9dcc-d1f9d5c3e358\",\"name\":\"Agriculture/Seafood v2\",\"slug\":\"agriseafoodopscreening\",\"public\":true,\"active\":true,\"keywords\":[\"covid\",\"attestation\",\"attestations\",\"agriculture\",\"seafood\",\"operator\",\"screening\"],\"prefix\":\"agrisea_os\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"migration-012\",\"updatedAt\":\"2020-06-05T22:56:02.311Z\"},\"versions\":[{\"formVersionId\":22,\"formId\":\"daa5c4c9-d49c-45b8-9dcc-d1f9d5c3e358\",\"changes\":\"this is a new version\",\"createdBy\":\"jsherman@idir\",\"createdAt\":\"2020-06-05T22:56:02.331Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T22:56:02.303Z\",\"statusCodes\":[{\"code\":\"A\",\"display\":\"Aa\",\"enabled\":false,\"nextCodes\":[],\"allowedClassifications\":[\"Good\",\"Bad\",\"Ugly\"],\"createdBy\":\"jsherman@idir\",\"createdAt\":\"2020-06-04T15:38:01.724Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:02.325Z\"},{\"code\":\"B\",\"display\":\"Bb\",\"enabled\":false,\"nextCodes\":[],\"allowedClassifications\":null,\"createdBy\":\"jsherman@idir\",\"createdAt\":\"2020-06-04T15:38:01.724Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:02.326Z\"}]}],\"formVersionId\":22}",
			"type": "string"
		},
		{
			"id": "0e424c05-e777-41dd-a39b-8178ba24d5e8",
			"key": "formVersionId",
			"value": 23,
			"type": "number"
		},
		{
			"id": "12dee711-da22-472b-bac8-b309d6b9511f",
			"key": "operationTypes",
			"value": [
				{
					"createdAt": "2020-06-04T15:02:53.631Z",
					"createdBy": "migration-011",
					"display": "Agriculture",
					"enabled": true,
					"type": "AGRICULTURE",
					"updatedAt": "2020-06-04T15:02:53.631Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-04T15:02:53.631Z",
					"createdBy": "migration-011",
					"display": "Seafood",
					"enabled": true,
					"type": "SEAFOOD",
					"updatedAt": "2020-06-04T15:02:53.631Z",
					"updatedBy": null
				}
			],
			"type": "any"
		},
		{
			"id": "170e7661-cd3b-492f-8738-f790a7e7301a",
			"key": "confirmationId",
			"value": "899086F3",
			"type": "string"
		},
		{
			"id": "bff8d018-26d1-4b66-b8a2-9a87c1d14f2c",
			"key": "submission",
			"value": {
				"attestation": {
					"agreeToInspection": true,
					"assessmentCompleted": true,
					"attestationId": "74d90a84-8b8a-464c-9e47-67eacc514492",
					"certifyAccurateInformation": true,
					"commonAreaDistancing": true,
					"createdAt": "2020-06-05T23:02:16.267Z",
					"createdBy": "public",
					"developedPlan": true,
					"disinfectingSchedule": true,
					"distancingFaceShields": true,
					"distancingMaintained": true,
					"educationContactPersonnel": true,
					"educationSignage": true,
					"guidelinesRead": true,
					"handWashingPaperTowels": true,
					"handWashingSignage": true,
					"handWashingSoapWater": true,
					"handWashingStations": true,
					"handWashingWaterless": true,
					"infectedFeeding": true,
					"infectedHousekeeping": true,
					"infectedWaste": true,
					"infectionAccommodation": true,
					"infectionHeathLinkBC": true,
					"infectionSanitization": true,
					"infectionSeparation": true,
					"infectionSymptoms": true,
					"laundryServices": true,
					"mealsDishware": true,
					"mealsDishwashing": true,
					"mealsDistancing": true,
					"protectionSignage": true,
					"selfIsolateAccommodation": true,
					"selfIsolateUnderstood": true,
					"sharedSleepingDistancing": true,
					"sharedSleepingPerRoom": 7,
					"sleepingAreaType": "SHARED",
					"submissionId": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
					"trainingCovid19": true,
					"trainingEtiquette": true,
					"trainingFirstAid": true,
					"trainingLocations": true,
					"trainingReporting": true,
					"transportationBusesVans": true,
					"transportationCleaningDistancing": true,
					"transportationHelicopter": true,
					"transportationSingleOccupant": true,
					"transportationTravelPod": true,
					"transportationTrucksCars": true,
					"updatedAt": "2020-06-05T23:02:16.246Z",
					"updatedBy": null,
					"wasteManagementBags": true,
					"wasteManagementGloves": true,
					"wasteManagementSchedule": true,
					"workerContactPersonnel": true
				},
				"business": {
					"addressLine1": "1234 Here St",
					"addressLine2": null,
					"businessId": 24,
					"city": "Saanich",
					"createdAt": "2020-06-05T23:02:16.267Z",
					"createdBy": "public",
					"name": "ZZ Smoke Testing",
					"orgBookId": null,
					"postalCode": "ABCDEF",
					"province": "BC",
					"submissionId": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
					"updatedAt": "2020-06-05T23:02:16.246Z",
					"updatedBy": null
				},
				"confirmationId": "899086F3",
				"contacts": [
					{
						"contactId": 47,
						"contactType": "PRIMARY",
						"createdAt": "2020-06-05T23:02:16.267Z",
						"createdBy": "public",
						"email": "jane@doe.com",
						"firstName": "Jane",
						"lastName": "Doe",
						"phone1": "1234567890",
						"phone2": "",
						"submissionId": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
						"updatedAt": "2020-06-05T23:02:16.246Z",
						"updatedBy": null
					},
					{
						"contactId": 48,
						"contactType": "COVID_COORDINATOR",
						"createdAt": "2020-06-05T23:02:16.267Z",
						"createdBy": "public",
						"email": "john@doh.com",
						"firstName": "John",
						"lastName": "D'oh",
						"phone1": "0987654321",
						"phone2": "",
						"submissionId": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
						"updatedAt": "2020-06-05T23:02:16.246Z",
						"updatedBy": null
					}
				],
				"createdAt": "2020-06-05T23:02:16.259Z",
				"createdBy": "jsherman@idir",
				"deleted": false,
				"formVersionId": 22,
				"location": {
					"accMotel": true,
					"accTents": true,
					"accWorkersHome": true,
					"city": "Victoria, BC",
					"cityLatitude": null,
					"cityLongitude": null,
					"createdAt": "2020-06-05T23:02:16.267Z",
					"createdBy": "public",
					"endDate": "2020-07-30",
					"locationId": 24,
					"motelAddressLine1": "2345 Everywhere",
					"motelAddressLine2": "",
					"motelCity": "Victoria",
					"motelName": "Heartbreak Hotel",
					"motelPostalCode": "123123",
					"motelProvince": "BC",
					"numberOfWorkers": 10,
					"startDate": "2020-05-10",
					"submissionId": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
					"tentDetails": "Tents pitched on motel parking lot",
					"updatedAt": "2020-06-05T23:02:16.246Z",
					"updatedBy": null
				},
				"notes": [],
				"operationType": {
					"createdAt": "2020-06-04T15:02:53.631Z",
					"createdBy": "migration-011",
					"display": "Seafood",
					"enabled": true,
					"type": "SEAFOOD",
					"updatedAt": "2020-06-04T15:02:53.631Z",
					"updatedBy": null
				},
				"statuses": [
					{
						"actionDate": null,
						"assignedTo": null,
						"assignedToEmail": null,
						"classification": null,
						"code": "SUBMITTED",
						"createdAt": "2020-06-05T23:02:16.275Z",
						"createdBy": "jsherman@idir",
						"notes": [],
						"statusCode": {
							"allowedClassifications": [],
							"code": "SUBMITTED",
							"createdAt": "2020-06-04T15:02:53.631Z",
							"createdBy": "migration-011",
							"display": "Submitted",
							"enabled": true,
							"nextCodes": [
								"ASSIGNED",
								"COMPLETED"
							],
							"updatedAt": "2020-06-05T22:56:01.959Z",
							"updatedBy": "jsherman@idir"
						},
						"submissionId": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
						"submissionStatusId": 39,
						"updatedAt": "2020-06-05T23:02:16.246Z",
						"updatedBy": null
					}
				],
				"submissionId": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
				"type": "SEAFOOD",
				"updatedAt": "2020-06-05T23:02:16.246Z",
				"updatedBy": null
			},
			"type": "any"
		},
		{
			"id": "838bcf14-6f2e-4e8d-859f-58d93559666d",
			"key": "submissionId",
			"value": "899086f3-b3e3-46e9-b6a2-f838c73a8cb5",
			"type": "string"
		},
		{
			"id": "045919bd-5f92-493c-9ab0-96dd12345185",
			"key": "operationType",
			"value": "SEAFOOD",
			"type": "string"
		},
		{
			"id": "adfe251e-c954-49d9-8d8b-8ab11e36c6b6",
			"key": "operationTypeDisplay",
			"value": "Seafood",
			"type": "string"
		},
		{
			"id": "d658274d-ec29-47c4-b8f9-449a74099687",
			"key": "submissionStatusId",
			"value": 40,
			"type": "number"
		},
		{
			"id": "9d4a9600-975f-4680-a28e-626642753580",
			"key": "submissionNoteId",
			"value": 53,
			"type": "number"
		},
		{
			"id": "04eb0f86-4bb1-445c-af5a-def02256318a",
			"key": "statusNoteId",
			"value": 54,
			"type": "number"
		},
		{
			"id": "df9bb115-abff-428b-a395-ff6b1c8d415a",
			"key": "changedSubmission",
			"value": "{\"submissionId\":\"899086f3-b3e3-46e9-b6a2-f838c73a8cb5\",\"formVersionId\":22,\"confirmationId\":\"899086F3\",\"type\":\"SEAFOOD\",\"deleted\":false,\"createdBy\":\"jsherman@idir\",\"createdAt\":\"2020-06-05T23:02:16.259Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T23:02:16.246Z\",\"operationType\":{\"type\":\"SEAFOOD\",\"display\":\"Seafood\",\"enabled\":true,\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-04T15:02:53.631Z\"},\"attestation\":{\"attestationId\":\"74d90a84-8b8a-464c-9e47-67eacc514492\",\"submissionId\":\"899086f3-b3e3-46e9-b6a2-f838c73a8cb5\",\"guidelinesRead\":true,\"assessmentCompleted\":true,\"developedPlan\":true,\"protectionSignage\":true,\"workerContactPersonnel\":true,\"commonAreaDistancing\":true,\"sleepingAreaType\":\"SHARED\",\"sharedSleepingPerRoom\":7,\"sharedSleepingDistancing\":true,\"selfIsolateUnderstood\":true,\"selfIsolateAccommodation\":true,\"laundryServices\":true,\"wasteManagementGloves\":true,\"wasteManagementSchedule\":true,\"wasteManagementBags\":true,\"handWashingStations\":true,\"handWashingSoapWater\":true,\"handWashingWaterless\":true,\"handWashingPaperTowels\":true,\"handWashingSignage\":true,\"distancingMaintained\":true,\"distancingFaceShields\":true,\"disinfectingSchedule\":true,\"educationSignage\":true,\"educationContactPersonnel\":true,\"transportationSingleOccupant\":true,\"transportationBusesVans\":true,\"transportationTrucksCars\":true,\"transportationHelicopter\":true,\"transportationTravelPod\":true,\"transportationCleaningDistancing\":true,\"trainingCovid19\":true,\"trainingEtiquette\":true,\"trainingLocations\":true,\"trainingFirstAid\":true,\"trainingReporting\":true,\"mealsDistancing\":true,\"mealsDishware\":true,\"mealsDishwashing\":true,\"infectionSeparation\":true,\"infectionSymptoms\":true,\"infectionHeathLinkBC\":true,\"infectionSanitization\":true,\"infectionAccommodation\":true,\"infectedFeeding\":true,\"infectedHousekeeping\":true,\"infectedWaste\":true,\"certifyAccurateInformation\":true,\"agreeToInspection\":true,\"createdBy\":\"public\",\"createdAt\":\"2020-06-05T23:02:16.267Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T23:02:16.246Z\"},\"business\":{\"businessId\":24,\"submissionId\":\"899086f3-b3e3-46e9-b6a2-f838c73a8cb5\",\"name\":\"ZZ Smoke Testing 2.0\",\"orgBookId\":null,\"addressLine1\":\"1234 Here St\",\"addressLine2\":null,\"city\":\"Saanich\",\"province\":\"BC\",\"postalCode\":\"ABCDEF\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-05T23:02:16.267Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T23:02:16.246Z\"},\"location\":{\"locationId\":24,\"submissionId\":\"899086f3-b3e3-46e9-b6a2-f838c73a8cb5\",\"startDate\":\"2020-05-10\",\"endDate\":\"2020-07-30\",\"city\":\"Victoria, TX\",\"cityLatitude\":null,\"cityLongitude\":null,\"numberOfWorkers\":10,\"accTents\":true,\"tentDetails\":\"Tents pitched on motel parking lot\",\"accMotel\":true,\"motelName\":\"Heartbreak Hotel\",\"motelAddressLine1\":\"2345 Everywhere\",\"motelAddressLine2\":\"\",\"motelCity\":\"Victoria\",\"motelProvince\":\"BC\",\"motelPostalCode\":\"123123\",\"accWorkersHome\":true,\"createdBy\":\"public\",\"createdAt\":\"2020-06-05T23:02:16.267Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T23:02:16.246Z\"},\"contacts\":[{\"contactId\":47,\"submissionId\":\"899086f3-b3e3-46e9-b6a2-f838c73a8cb5\",\"contactType\":\"PRIMARY\",\"firstName\":\"Jane\",\"lastName\":\"Doe\",\"phone1\":\"1234567890\",\"phone2\":\"\",\"email\":\"first@contact.ca\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-05T23:02:16.267Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T23:02:16.246Z\"},{\"contactId\":48,\"submissionId\":\"899086f3-b3e3-46e9-b6a2-f838c73a8cb5\",\"contactType\":\"COVID_COORDINATOR\",\"firstName\":\"John\",\"lastName\":\"D'oh\",\"phone1\":\"0987654321\",\"phone2\":\"\",\"email\":\"second@contact.ca\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-05T23:02:16.267Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T23:02:16.246Z\"}],\"statuses\":[{\"submissionStatusId\":39,\"submissionId\":\"899086f3-b3e3-46e9-b6a2-f838c73a8cb5\",\"code\":\"SUBMITTED\",\"assignedTo\":null,\"assignedToEmail\":null,\"actionDate\":null,\"classification\":null,\"createdBy\":\"jsherman@idir\",\"createdAt\":\"2020-06-05T23:02:16.275Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-05T23:02:16.246Z\",\"statusCode\":{\"code\":\"SUBMITTED\",\"display\":\"Submitted\",\"enabled\":true,\"nextCodes\":[\"ASSIGNED\",\"COMPLETED\"],\"allowedClassifications\":[],\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:01.959Z\"},\"notes\":[]}],\"notes\":[]}",
			"type": "string"
		},
		{
			"id": "e386a832-df11-4ef1-acd7-9baf1962edd2",
			"key": "changedFormDefinition",
			"value": "{\"formId\":\"daa5c4c9-d49c-45b8-9dcc-d1f9d5c3e358\",\"description\":\"Description updated\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:02.319Z\",\"metadata\":{\"formId\":\"daa5c4c9-d49c-45b8-9dcc-d1f9d5c3e358\",\"name\":\"Agriculture/Seafood v2\",\"slug\":\"agriseafoodopscreening\",\"public\":true,\"active\":true,\"keywords\":[\"covid\",\"attestation\",\"attestations\",\"agriculture\",\"seafood\",\"operator\",\"screening\"],\"prefix\":\"agrisea_os\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"migration-012\",\"updatedAt\":\"2020-06-05T22:56:02.311Z\"},\"versions\":[{\"changes\":\"this is a new version\",\"statusCodes\":[{\"code\":\"A\",\"display\":\"Aa\",\"enabled\":true,\"nextCodes\":[\"B\"],\"allowedClassifications\":[\"Good\",\"Bad\",\"Ugly\"]},{\"code\":\"B\",\"display\":\"Bb\",\"enabled\":true,\"nextCodes\":[\"A\"]}]}],\"formVersionId\":22}",
			"type": "string"
		},
		{
			"id": "264b250a-72af-4d75-804b-8fd34d33e6dc",
			"key": "confirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":true,\"config\":{\"to\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"from\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"title\":\"Agriculture and Seafood Form Accepted\",\"subject\":\"Agriculture and Seafood Form Accepted\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.pathfinder.gov.bc.ca/app/agriseafoodopscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Agriculture and Seafood Attestation\"},\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:02.649Z\"}",
			"type": "string"
		},
		{
			"id": "e7b3e4f1-22e0-4e38-966e-d2a6d42fb02f",
			"key": "changedConfirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":false,\"config\":{\"to\":\"newem@il.com\",\"from\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"title\":\"Agriculture and Seafood Form Accepted\",\"subject\":\"Ignore this please\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.pathfinder.gov.bc.ca/app/agriseafoodopscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Agriculture and Seafood Attestation\"},\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:02.649Z\"}",
			"type": "string"
		},
		{
			"id": "29cd3649-b510-4fa8-9c36-35df4ad0cd28",
			"key": "resetConfirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":true,\"config\":{\"to\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"from\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"title\":\"Agriculture and Seafood Form Accepted\",\"subject\":\"Agriculture and Seafood Form Accepted\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.pathfinder.gov.bc.ca/app/agriseafoodopscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Agriculture and Seafood Attestation\"},\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-04T15:02:53.631Z\",\"updatedBy\":\"jsherman@idir\",\"updatedAt\":\"2020-06-05T22:56:02.649Z\"}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}