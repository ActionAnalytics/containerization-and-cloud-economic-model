{
	"info": {
		"_postman_id": "ef6e2b78-cff6-4f26-93c6-43226f7d99fb",
		"name": "AgriSeafoodOpScreening_v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search Forms",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4702b364-c46c-4eb3-b849-ae96794991f5",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/forms?slug=agri&public=true&active=true&name=agriculture&keyword=seafood",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"forms"
					],
					"query": [
						{
							"key": "slug",
							"value": "agri"
						},
						{
							"key": "public",
							"value": "true"
						},
						{
							"key": "active",
							"value": "true"
						},
						{
							"key": "name",
							"value": "agriculture"
						},
						{
							"key": "keyword",
							"value": "seafood"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Current Form Definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cdf4480a-e6bf-4c85-804b-5bc78ea9dc24",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('metadata');",
							"    pm.expect(jsonData.metadata).to.have.property('slug');",
							"    pm.expect(jsonData.metadata.slug).to.equal(pm.collectionVariables.get('slug'));",
							"    pm.collectionVariables.set('formVersionId',jsonData.versions[0].formVersionId);",
							"    pm.collectionVariables.set('formDefinition', JSON.stringify(jsonData));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Operation Types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b8f90eb-8181-4db4-a199-f5fc36eafeb9",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
							"    pm.collectionVariables.set('operationTypes', jsonData);",
							"    jsonData.every(x => ['AGRICULTURE','SEAFOOD'].includes(x.type));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/types",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"types"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22667b6b-1dd1-4586-b0f6-0d6faba52003",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type', 'SEAFOOD');",
							"    pm.expect(jsonData).to.have.property('operationType');",
							"    pm.expect(jsonData.operationType.type).to.equal(jsonData.type);",
							"    pm.collectionVariables.set('submissionId', jsonData.submissionId);",
							"    pm.collectionVariables.set('confirmationId', jsonData.confirmationId);",
							"    pm.collectionVariables.set('submission', jsonData);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"attestation\": {\n\t\t\"guidelinesRead\": true,\n\t\t\"assessmentCompleted\": true,\n\t\t\"developedPlan\": true,\n\t\t\"protectionSignage\": true,\n\t\t\"workerContactPersonnel\": true,\n\t\t\"commonAreaDistancing\": true,\n\t\t\"sleepingAreaType\": \"SHARED\",\n\t\t\"sharedSleepingPerRoom\": 7,\n\t\t\"sharedSleepingDistancing\": true,\n\t\t\"selfIsolateUnderstood\": true,\n\t\t\"selfIsolateAccommodation\": true,\n\t\t\"laundryServices\": true,\n\t\t\"wasteManagementGloves\": true,\n\t\t\"wasteManagementSchedule\": true,\n\t\t\"wasteManagementBags\": true,\n\t\t\"handWashingStations\": true,\n\t\t\"handWashingSoapWater\": true,\n\t\t\"handWashingWaterless\": true,\n\t\t\"handWashingPaperTowels\": true,\n\t\t\"handWashingSignage\": true,\n\t\t\"distancingMaintained\": true,\n\t\t\"distancingFaceShields\": true,\n\t\t\"disinfectingSchedule\": true,\n\t\t\"educationSignage\": true,\n\t\t\"educationContactPersonnel\": true,\n\t\t\"trainingCovid19\": true,\n\t\t\"trainingEtiquette\": true,\n\t\t\"trainingLocations\": true,\n\t\t\"trainingFirstAid\": true,\n\t\t\"trainingReporting\": true,\n\t\t\"mealsDistancing\": true,\n\t\t\"mealsDishware\": true,\n\t\t\"mealsDishwashing\": true,\n\t\t\"infectionSeparation\": true,\n\t\t\"infectionSymptoms\": true,\n\t\t\"infectionHeathLinkBC\": true,\n\t\t\"infectionSanitization\": true,\n\t\t\"infectionAccommodation\": true,\n\t\t\"infectedFeeding\": true,\n\t\t\"infectedHousekeeping\": true,\n\t\t\"infectedWaste\": true,\n\t\t\"certifyAccurateInformation\": true,\n\t\t\"agreeToInspection\": true,\n\t\t\"transportationSingleOccupant\": true,\n\t\t\"transportationBusesVans\": true,\n\t\t\"transportationTrucksCars\": true,\n\t\t\"transportationHelicopter\": true,\n\t\t\"transportationTravelPod\": true,\n\t\t\"transportationCleaningDistancing\": true\n\t},\n\t\"business\": {\n\t\t\"name\": \"ZZ Smoke Testing\",\n\t\t\"orgBookId\": null,\n\t\t\"addressLine1\": \"1234 Here St\",\n\t\t\"addressLine2\": null,\n\t\t\"city\": \"Saanich\",\n\t\t\"province\": \"BC\",\n\t\t\"postalCode\": \"ABCDEF\"\t\n\t},\n\t\"contacts\":[\n\t\t{\n\t\t\t\"contactType\": \"PRIMARY\",\n\t\t\t\"firstName\": \"Jane\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"phone1\": \"1234567890\",\n\t\t\t\"phone2\": \"\",\n\t\t\t\"email\": \"jane@doe.com\"\n\t\t},\n\t    {\t\t\t\n\t\t\t\"contactType\": \"COVID_COORDINATOR\",\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"lastName\": \"D'oh\",\n\t\t\t\"phone1\": \"0987654321\",\n\t\t\t\"phone2\": \"\",\n\t\t\t\"email\": \"john@doh.com\"\n\t\t}\n\t],\n\t\"location\": {\n\t\t\"startDate\": \"2020-05-10\",\n\t\t\"endDate\": \"2020-07-30\",\n\t\t\"city\": \"Victoria, BC\",\n\t\t\"cityLatitude\": null,\n\t\t\"cityLongitude\": null,\n\t\t\"mineNumber\": null,\n\t\t\"permitNumber\": \"\",\n\t\t\"numberOfWorkers\": 10,\n\t\t\"accTents\": true,\n\t\t\"tentDetails\": \"Tents pitched on motel parking lot\",\n\t\t\"accMotel\": true,\n\t\t\"motelName\": \"Heartbreak Hotel\",\n\t\t\"motelAddressLine1\": \"2345 Everywhere\",\n\t\t\"motelAddressLine2\": \"\",\n\t\t\"motelCity\": \"Victoria\",\n\t\t\"motelProvince\": \"BC\",\n\t\t\"motelPostalCode\": \"123123\",\n\t\t\"accWorkersHome\": true,\n\t\t\"licencees\": \"Ministry of Forests\"\n\t},\n\t\"type\": \"SEAFOOD\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e98e746-2eb2-4a36-a676-66f684a88c46",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type');",
							"    pm.expect(jsonData).to.have.property('operationType');",
							"    pm.expect(jsonData.operationType.type).to.equal(jsonData.type);",
							"",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.operationType.type).to.equal(pm.collectionVariables.get('submission').type);",
							"",
							"    pm.collectionVariables.set('formVersionId', jsonData.formVersionId);",
							"    pm.collectionVariables.set('operationType', jsonData.operationType.type);",
							"    pm.collectionVariables.set('operationTypeDisplay', jsonData.operationType.display);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Submissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cf94a4bf-c717-4c96-90c7-13e32337f01d",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData).to.have.property('type');",
							"    pm.expect(jsonData.type).to.equal(pm.collectionVariables.get('operationTypeDisplay'));",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions?version={{formVersionId}}&city=Vic&business=ZZ&confirmationId={{confirmationId}}&type={{operationType}}&tiny=true",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					],
					"query": [
						{
							"key": "version",
							"value": "{{formVersionId}}"
						},
						{
							"key": "city",
							"value": "Vic"
						},
						{
							"key": "business",
							"value": "ZZ"
						},
						{
							"key": "confirmationId",
							"value": "{{confirmationId}}"
						},
						{
							"key": "type",
							"value": "{{operationType}}"
						},
						{
							"key": "tiny",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status (with notes)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f61e6961-b066-4797-9b8b-39649f04e76b",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.not.be.null;",
							"    pm.expect(jsonData.code).to.equal('ASSIGNED');",
							"    pm.expect(jsonData.notes).to.be.an('array');",
							"    pm.expect(jsonData.notes).to.have.lengthOf(1);",
							"    pm.expect(jsonData.notes[0].note).to.equal('Status level note for smoke testing.')",
							"    pm.collectionVariables.set('submissionStatusId', jsonData.submissionStatusId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"Jason Sherman\",\n\t\"assignedToEmail\": \"jsherman@parcsystems.ca\",\n\t\"actionDate\": \"2020-06-01\",\n\t\"notes\": [\n\t\t{\n\t\t\t\"note\": \"Status level note for smoke testing.\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status (with invalid classification)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff9a7c69-39b6-460e-9be9-ae55307a416b",
						"exec": [
							"pm.test(\"422 response\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"COMPLETED\",\n\t\"assignedTo\": \"Jason Sherman\",\n\t\"assignedToEmail\": \"jsherman@parcsystems.ca\",\n\t\"actionDate\": \"2020-06-01\",\n\t\"notes\": [\n\t\t{\n\t\t\t\"note\": \"Status level note for smoke testing.\"\n\t\t}\n\t],\n\t\"classification\": \"This is a bad classification value\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Statuses",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "767f156a-aa3e-4033-8388-6428dca5a4ba",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Added status is first in list\", function () {",
							"    // assumes this is run after Add Status (with notes)",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"ME!\",\n\t\"notes\": [{\"note\": \"voila!\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Submission Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "433af2ab-bea0-4b52-85ce-914f179d6efd",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.submissionStatusId).to.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.note).to.equal('Submission level note for smoke testing.');",
							"    pm.collectionVariables.set('submissionNoteId', jsonData.noteId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"Submission level note for smoke testing.\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b85bdd7e-e6e7-469d-baf0-6a1ca974c178",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Added note is first in list\", function () {",
							"    // assumes this is run after Add Submission Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.submissionId).to.not.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.noteId).to.equal(pm.collectionVariables.get('submissionNoteId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"this note is for the submission\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Status Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4370be9-912e-42dd-bafe-e2d716915add",
						"exec": [
							"pm.test(\"201 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns single item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"    pm.expect(jsonData.submissionId).to.be.null;",
							"    pm.expect(jsonData.note).to.equal('Additional Status level note.');",
							"    pm.collectionVariables.set('statusNoteId', jsonData.noteId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "307dac53-2270-4e79-bc5c-263881edb6a6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"note\": \"Additional Status level note.\"\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses/{{submissionStatusId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses",
						"{{submissionStatusId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Status Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "935a854f-40c8-4663-872b-c16e81e88f22",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Note belongs to status\", function () {",
							"    // assumes this is run after Add Status Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('submissionStatusId');",
							"    pm.expect(jsonData).to.have.property('noteId');",
							"    pm.expect(jsonData.submissionId).to.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.not.be.null;",
							"    pm.expect(jsonData.noteId).to.not.be.null;",
							"    pm.expect(jsonData.submissionStatusId).to.equal(pm.collectionVariables.get('submissionStatusId'));",
							"    pm.expect(jsonData.noteId).to.equal(pm.collectionVariables.get('statusNoteId'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"code\": \"ASSIGNED\",\n\t\"assignedTo\": \"ME!\",\n\t\"notes\": [{\"note\": \"voila!\"}]\n}"
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/statuses/{{submissionStatusId}}/notes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"statuses",
						"{{submissionStatusId}}",
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Status Codes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac133b50-cc26-4f10-8474-c737264268d5",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"pm.test(\"Items are status codes\", function () {",
							"    // assumes this is run after Add Status Note",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('code');",
							"    pm.expect(jsonData).to.have.property('display');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('nextCodes');",
							"    pm.expect(jsonData.code).to.not.be.null;",
							"    pm.expect(jsonData.display).to.not.be.null;",
							"    pm.expect(jsonData.enabled).to.not.be.null;",
							"    pm.expect(jsonData.nextCodes).to.not.be.null;",
							"    pm.expect(jsonData.enabled).to.be.an('boolean');",
							"    pm.expect(jsonData.nextCodes).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current/statusCodes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current",
						"statusCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Status Codes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "49512776-992f-4e4f-b292-50c7e1ddd94f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e9426236-13de-4423-94e8-2c930e4fead4",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"code\": \"SUBMITTED\",\n        \"display\": \"Submitted\",\n        \"enabled\": true,\n        \"nextCodes\": [\"ASSIGNED\",\"COMPLETED\"]\n    },\n    {\n        \"code\": \"ASSIGNED\",\n        \"display\": \"Assigned\",\n        \"enabled\": true,\n        \"nextCodes\": [\"COMPLETED\"],\n        \"allowedClassifications\":[\"OK\"]\n    },\n    {\n        \"code\": \"COMPLETED\",\n        \"display\": \"Completed\",\n        \"enabled\": true,\n        \"nextCodes\": [],\n        \"allowedClassifications\":[\"Pass\",\"Fail\"]\n    },\n    {\n        \"code\": \"SMOKE_TEST_STATUS_A\",\n        \"display\": \"Smoke test Status A (enabled)\",\n        \"enabled\": true,\n        \"nextCodes\": [\"COMPLETED\",\"SMOKE_TEST_STATUS_B\"]\n    },\n    {\n        \"code\": \"SMOKE_TEST_STATUS_B\",\n        \"display\": \"Smoke test Status B (not enabled)\",\n        \"enabled\": false,\n        \"nextCodes\": [\"COMPLETED\",\"SMOKE_TEST_STATUS_A\",\"ONLY_REAL_CODES_ARE_ADDED\"]\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current/statusCodes",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current",
						"statusCodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Submission",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5c4a7f1e-777b-4baf-8487-448023140164",
						"exec": [
							"var submission = pm.collectionVariables.get('submission');",
							"console.log(submission);",
							"var data = submission;",
							"data.location.city='Victoria, TX';",
							"data.location.mineNumber='0123456';",
							"data.business.name='ZZ Smoke Testing 2.0';",
							"data.contacts[0].email='first@contact.ca';",
							"data.contacts[1].email='second@contact.ca';",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedSubmission\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "daa42590-f427-4c4e-94a4-32636e0cedb2",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the updated item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    ",
							"    pm.expect(jsonData.location.city).to.equal('Victoria, TX');",
							"    pm.expect(jsonData.location.mineNumber).to.equal('0123456');",
							"    pm.expect(jsonData.business.name).to.equal('ZZ Smoke Testing 2.0');",
							"    pm.expect(jsonData.contacts[0].email).to.equal('first@contact.ca');",
							"    pm.expect(jsonData.contacts[1].email).to.equal('second@contact.ca');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedSubmission}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Form Definition",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0437d071-e592-41e9-bafc-1e7cacbe8ace",
						"exec": [
							"var formDefinition = pm.collectionVariables.get('formDefinition');",
							"console.log(formDefinition);",
							"var data = JSON.parse(formDefinition);",
							"data.description = 'Description updated';",
							"data.metadata.name = 'Agriculture/Seafood v2';",
							"data.versions = [",
							"    {",
							"        changes: 'this is a new version', ",
							"        statusCodes: [",
							"            {code: 'A', display: 'Aa', enabled: true, nextCodes: ['B'], allowedClassifications: [\"Good\", \"Bad\", \"Ugly\"]},",
							"            {code: 'B', display: 'Bb', enabled: true, nextCodes: ['A']}",
							"            ]",
							"    }];",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedFormDefinition\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "39b294cd-48bf-43c8-8459-dec00c572edf",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.description).to.equal('Description updated');",
							"    pm.expect(jsonData.metadata.name).to.equal('Agriculture/Seafood v2');",
							"    pm.expect(jsonData.metadata.slug).to.equal(pm.collectionVariables.get('slug'));",
							"    pm.expect(jsonData.versions[0].formVersionId).to.be.above(pm.collectionVariables.get('formVersionId'));",
							"    pm.expect(jsonData.versions[0].statusCodes[0].code).to.equal('A');",
							"    ",
							"    pm.collectionVariables.set('formVersionId',jsonData.versions[0].formVersionId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedFormDefinition}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/current",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "214724d3-101d-4b67-bda4-d57eb77a4b10",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf.at.least(2);",
							"});",
							"pm.test(\"Returns the correct items\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('config');",
							"    pm.expect(jsonData.config).to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Setting confirmationEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99b98fe1-68c5-4de3-b39f-a644078c883e",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('enabled');",
							"    pm.expect(jsonData).to.have.property('config');",
							"    pm.expect(jsonData.config).to.be.an('object');",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.collectionVariables.set('confirmationEmail', JSON.stringify(jsonData));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Setting confirmationEmail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "79d391c6-5ced-45a0-9a5b-30142cfacbb1",
						"exec": [
							"var confirmationEmail = pm.collectionVariables.get('confirmationEmail');",
							"console.log(confirmationEmail);",
							"var data = JSON.parse(confirmationEmail);",
							"data.enabled = false;",
							"data.config.to = 'newem@il.com';",
							"data.config.subject ='Ignore this please';",
							"console.log(data);",
							"pm.collectionVariables.set(\"changedConfirmationEmail\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cf13c7fc-1702-4bd5-8daf-9ed2a4f2e66c",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.expect(jsonData.enabled).to.equal(false);",
							"    pm.expect(jsonData.config.to).to.equal('newem@il.com');",
							"    pm.expect(jsonData.config.subject).to.equal('Ignore this please');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{changedConfirmationEmail}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset Setting confirmationEmail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5e9c3078-3838-492b-9eb6-f4df76473bd1",
						"exec": [
							"var confirmationEmail = pm.collectionVariables.get('confirmationEmail');",
							"console.log(confirmationEmail);",
							"var data = JSON.parse(confirmationEmail);",
							"pm.collectionVariables.set(\"resetConfirmationEmail\", JSON.stringify(data));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6c048b0d-6596-4d0a-bcee-aa431ba43dcd",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal('confirmationEmail');",
							"    pm.expect(jsonData.enabled).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{resetConfirmationEmail}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/settings/confirmationEmail",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"settings",
						"confirmationEmail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Submission PDF",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}/pdf",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}",
						"pdf"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Submission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d635f2a6-9e04-4fda-b968-30a46d963d2e",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.deleted).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions/{{submissionId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions",
						"{{submissionId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Submissions (Deleted)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3a94920-5209-454f-b99d-475e29331a8a",
						"exec": [
							"pm.test(\"200 response\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Returns array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf(1);",
							"});",
							"pm.test(\"Returns the correct item\", function () {",
							"    var jsonData = pm.response.json()[0];",
							"    pm.expect(jsonData).to.have.property('submissionId');",
							"    pm.expect(jsonData).to.have.property('confirmationId');",
							"    pm.expect(jsonData.submissionId).to.equal(pm.collectionVariables.get('submissionId'));",
							"    pm.expect(jsonData.confirmationId).to.equal(pm.collectionVariables.get('confirmationId'));",
							"    pm.expect(jsonData.deleted).to.equal(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/{{path}}/api/v1/{{slug}}/submissions?deleted=true&confirmationId={{confirmationId}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"{{path}}",
						"api",
						"v1",
						"{{slug}}",
						"submissions"
					],
					"query": [
						{
							"key": "deleted",
							"value": "true"
						},
						{
							"key": "confirmationId",
							"value": "{{confirmationId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJrdFJRN3VLZ3hYVU91cjdiaDRseGl1TGlUdVhzM3FyZEpzZFBnLTdvY1FnIn0.eyJqdGkiOiJjNTM4MWZlZi1mNzZkLTQ4YmQtOGI1Ni1kYzYxMDFhYjMyZWIiLCJleHAiOjE1OTEyMjY0NzksIm5iZiI6MCwiaWF0IjoxNTkxMjI2MTc5LCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvY3AxcWx5MmQiLCJhdWQiOlsiY29tZm9ydCIsImNvbWZvcnQtZnJvbnRlbmQiLCJjb21mb3J0LWZyb250ZW5kLWxvY2FsIiwiY29tZm9ydC1mb3Jlc3RyeXNlY3Rvcm9wc2NyZWVuaW5nIiwiY29tZm9ydC10ZXN0Y2FzZSIsImNvbWZvcnQtbWluZXNvcGVyYXRvcnNjcmVlbmluZyIsImNvbWZvcnQtYWdyaXNlYWZvb2RvcHNjcmVlbmluZyJdLCJzdWIiOiI2OTM4NDVmZS05OGZmLTRjNzEtOGEwOS04NWEzNDYwZGQzNzIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjb21mb3J0LWZyb250ZW5kLWxvY2FsIiwibm9uY2UiOiI2YjIwZjQxMy0yZGRhLTQ4ZGItOGZjZC04ZjhiZDI3N2NlZWIiLCJhdXRoX3RpbWUiOjE1OTEyMjYxNzgsInNlc3Npb25fc3RhdGUiOiI2ZTdhNWQxYy1hMzU1LTRjYTAtOGRjYy1iYjBiMjFkMWQ5ODgiLCJhY3IiOiIxIiwicmVzb3VyY2VfYWNjZXNzIjp7ImNvbWZvcnQtZm9yZXN0cnlzZWN0b3JvcHNjcmVlbmluZyI6eyJyb2xlcyI6WyJlZGl0b3IiLCJ2aWV3ZXIiLCJhZG1pbiIsInJldmlld2VyIl19LCJjb21mb3J0LXRlc3RjYXNlIjp7InJvbGVzIjpbImVkaXRvciIsInZpZXdlciIsImFkbWluIiwicmV2aWV3ZXIiXX0sImNvbWZvcnQtZnJvbnRlbmQtbG9jYWwiOnsicm9sZXMiOlsiRnJvbnRlbmQgRGV2ZWxvcGVyIiwiZGV2ZWxvcGVyIl19LCJjb21mb3J0LW1pbmVzb3BlcmF0b3JzY3JlZW5pbmciOnsicm9sZXMiOlsidmlld2VyIiwiZWRpdG9yIiwiYWRtaW4iLCJyZXZpZXdlciJdfSwiY29tZm9ydC1hZ3Jpc2VhZm9vZG9wc2NyZWVuaW5nIjp7InJvbGVzIjpbImVkaXRvciIsInZpZXdlciIsImFkbWluIiwicmV2aWV3ZXIiXX0sImNvbWZvcnQiOnsicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19fSwic2NvcGUiOiJvcGVuaWQgY29tZm9ydC1mcm9udGVuZCBjb21mb3J0IGNvbWZvcnQtZnJvbnRlbmQtbG9jYWwiLCJuYW1lIjoiSmFzb24gU2hlcm1hbiIsInByZWZlcnJlZF91c2VybmFtZSI6ImpzaGVybWFuQGlkaXIiLCJlbWFpbCI6ImpzaGVybWFuQHBhcmNzeXN0ZW1zLmNhIn0.s8HUJBqTImXxGzJyE-XYIy0AAlF_0yBiU5kpB5qRm8omkndCCQWJYkA3CwQH9zpTOvdVDKvaaE8gGjTgFsbdZCN4RpwkcvJXpfLmmOmrm2bOfkFfG99NIGAurm9LAb37CODAZbCjpODXdGVWhSzjzb7ZbWQS2aeiJ7V9mD4I3LZBi_iSawqTGjqSXHY4T8Bprds4Vt8eG8sINh0_L_y6dox_UnJQHAr-PnMd3o2GwimnvOXipuUM7nrafZH8IlgpwVjRgwhNaUodjEIB4J3wvWgjcydfAm-lI-TWcz2M8b72OXwBRQNn-futYnA3z8_-2fuiYOR34zNPRWBFjKi56A",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9e58a9ba-f1f0-4fde-a15e-0c2470c992e8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "652b2850-b453-4594-b0cc-c8b87395005f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8af93c97-50f5-4919-ae86-24f99ba7e9bd",
			"key": "host",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"id": "33a9ad44-05c9-451e-86b5-f6f6ca425725",
			"key": "path",
			"value": "app",
			"type": "string"
		},
		{
			"id": "c7d94f0c-8847-4195-85fe-ebe22f60d676",
			"key": "slug",
			"value": "agriseafoodopscreening",
			"type": "string"
		},
		{
			"id": "3c2aa600-ef15-4246-b9ca-4a699a16460e",
			"key": "formDefinition",
			"value": "{\"formId\":\"8711e9bc-3c2d-44b1-94e6-356f9d0a437e\",\"description\":\"Description updated\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:08:54.896Z\",\"metadata\":{\"formId\":\"8711e9bc-3c2d-44b1-94e6-356f9d0a437e\",\"name\":\"Agriculture/Seafood v2\",\"slug\":\"agriseafoodopscreening\",\"public\":true,\"active\":true,\"keywords\":[\"covid\",\"attestation\",\"attestations\",\"agriculture\",\"seafood\",\"operator\",\"screening\"],\"prefix\":\"agrisea_os\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:08:54.881Z\"},\"versions\":[{\"formVersionId\":7,\"formId\":\"8711e9bc-3c2d-44b1-94e6-356f9d0a437e\",\"changes\":\"this is a new version\",\"createdBy\":\"development\",\"createdAt\":\"2020-06-03T23:08:54.935Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:08:54.868Z\",\"statusCodes\":[{\"code\":\"A\",\"display\":\"Aa\",\"enabled\":true,\"nextCodes\":[\"B\"],\"allowedClassifications\":[\"Good\",\"Bad\",\"Ugly\"],\"createdBy\":\"development\",\"createdAt\":\"2020-06-03T22:25:15.569Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:08:54.912Z\"},{\"code\":\"B\",\"display\":\"Bb\",\"enabled\":true,\"nextCodes\":[\"A\"],\"allowedClassifications\":null,\"createdBy\":\"development\",\"createdAt\":\"2020-06-03T22:25:15.569Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:08:54.912Z\"}]}],\"formVersionId\":7}",
			"type": "string"
		},
		{
			"id": "9dbc5f45-92ab-47ca-944a-61b68062b5e6",
			"key": "formVersionId",
			"value": 8,
			"type": "number"
		},
		{
			"id": "0939d05d-7b41-448d-9f10-033bcdc00bec",
			"key": "operationTypes",
			"value": [
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-011",
					"display": "Agriculture",
					"enabled": true,
					"type": "AGRICULTURE",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				{
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-011",
					"display": "Seafood",
					"enabled": true,
					"type": "SEAFOOD",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				}
			],
			"type": "any"
		},
		{
			"id": "38d62348-a3cc-45cd-929e-694c9a5b5b7a",
			"key": "confirmationId",
			"value": "11787E21",
			"type": "string"
		},
		{
			"id": "8cf81fa4-8168-48c9-8e7f-a9fa97263d84",
			"key": "submission",
			"value": {
				"attestation": {
					"agreeToInspection": true,
					"assessmentCompleted": true,
					"attestationId": "21c951ab-d7fb-4fa8-b150-14dc84bd715d",
					"certifyAccurateInformation": true,
					"commonAreaDistancing": true,
					"createdAt": "2020-06-03T23:16:55.653Z",
					"createdBy": "public",
					"developedPlan": true,
					"disinfectingSchedule": true,
					"distancingFaceShields": true,
					"distancingMaintained": true,
					"educationContactPersonnel": true,
					"educationSignage": true,
					"guidelinesRead": true,
					"handWashingPaperTowels": true,
					"handWashingSignage": true,
					"handWashingSoapWater": true,
					"handWashingStations": true,
					"handWashingWaterless": true,
					"infectedFeeding": true,
					"infectedHousekeeping": true,
					"infectedWaste": true,
					"infectionAccommodation": true,
					"infectionHeathLinkBC": true,
					"infectionSanitization": true,
					"infectionSeparation": true,
					"infectionSymptoms": true,
					"laundryServices": true,
					"mealsDishware": true,
					"mealsDishwashing": true,
					"mealsDistancing": true,
					"protectionSignage": true,
					"selfIsolateAccommodation": true,
					"selfIsolateUnderstood": true,
					"sharedSleepingDistancing": true,
					"sharedSleepingPerRoom": 7,
					"sleepingAreaType": "SHARED",
					"submissionId": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
					"trainingCovid19": true,
					"trainingEtiquette": true,
					"trainingFirstAid": true,
					"trainingLocations": true,
					"trainingReporting": true,
					"transportationBusesVans": true,
					"transportationCleaningDistancing": true,
					"transportationHelicopter": true,
					"transportationSingleOccupant": true,
					"transportationTravelPod": true,
					"transportationTrucksCars": true,
					"updatedAt": "2020-06-03T23:16:55.459Z",
					"updatedBy": null,
					"wasteManagementBags": true,
					"wasteManagementGloves": true,
					"wasteManagementSchedule": true,
					"workerContactPersonnel": true
				},
				"business": {
					"addressLine1": "1234 Here St",
					"addressLine2": null,
					"businessId": 9,
					"city": "Saanich",
					"createdAt": "2020-06-03T23:16:55.653Z",
					"createdBy": "public",
					"name": "ZZ Smoke Testing",
					"orgBookId": null,
					"postalCode": "ABCDEF",
					"province": "BC",
					"submissionId": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
					"updatedAt": "2020-06-03T23:16:55.459Z",
					"updatedBy": null
				},
				"confirmationId": "11787E21",
				"contacts": [
					{
						"contactId": 17,
						"contactType": "PRIMARY",
						"createdAt": "2020-06-03T23:16:55.653Z",
						"createdBy": "public",
						"email": "jane@doe.com",
						"firstName": "Jane",
						"lastName": "Doe",
						"phone1": "1234567890",
						"phone2": "",
						"submissionId": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
						"updatedAt": "2020-06-03T23:16:55.459Z",
						"updatedBy": null
					},
					{
						"contactId": 18,
						"contactType": "COVID_COORDINATOR",
						"createdAt": "2020-06-03T23:16:55.653Z",
						"createdBy": "public",
						"email": "john@doh.com",
						"firstName": "John",
						"lastName": "D'oh",
						"phone1": "0987654321",
						"phone2": "",
						"submissionId": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
						"updatedAt": "2020-06-03T23:16:55.459Z",
						"updatedBy": null
					}
				],
				"createdAt": "2020-06-03T23:16:55.625Z",
				"createdBy": "public",
				"deleted": false,
				"formVersionId": 7,
				"location": {
					"accMotel": true,
					"accTents": true,
					"accWorkersHome": true,
					"city": "Victoria, BC",
					"cityLatitude": null,
					"cityLongitude": null,
					"createdAt": "2020-06-03T23:16:55.653Z",
					"createdBy": "public",
					"endDate": "2020-07-30",
					"licencees": "Ministry of Forests",
					"locationId": 9,
					"mineNumber": null,
					"motelAddressLine1": "2345 Everywhere",
					"motelAddressLine2": "",
					"motelCity": "Victoria",
					"motelName": "Heartbreak Hotel",
					"motelPostalCode": "123123",
					"motelProvince": "BC",
					"numberOfWorkers": 10,
					"permitNumber": "",
					"startDate": "2020-05-10",
					"submissionId": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
					"tentDetails": "Tents pitched on motel parking lot",
					"updatedAt": "2020-06-03T23:16:55.459Z",
					"updatedBy": null
				},
				"notes": [],
				"operationType": {
					"createdAt": "2020-06-03T22:06:37.610Z",
					"createdBy": "migration-011",
					"display": "Seafood",
					"enabled": true,
					"type": "SEAFOOD",
					"updatedAt": "2020-06-03T22:06:37.610Z",
					"updatedBy": null
				},
				"statuses": [
					{
						"actionDate": null,
						"assignedTo": null,
						"assignedToEmail": null,
						"classification": null,
						"code": "SUBMITTED",
						"createdAt": "2020-06-03T23:16:55.660Z",
						"createdBy": "public",
						"notes": [],
						"statusCode": {
							"allowedClassifications": [],
							"code": "SUBMITTED",
							"createdAt": "2020-06-03T22:06:37.610Z",
							"createdBy": "migration-011",
							"display": "Submitted",
							"enabled": true,
							"nextCodes": [
								"ASSIGNED",
								"COMPLETED"
							],
							"updatedAt": "2020-06-03T22:24:57.250Z",
							"updatedBy": "development"
						},
						"submissionId": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
						"submissionStatusId": 14,
						"updatedAt": "2020-06-03T23:16:55.459Z",
						"updatedBy": null
					}
				],
				"submissionId": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
				"type": "SEAFOOD",
				"updatedAt": "2020-06-03T23:16:55.459Z",
				"updatedBy": null
			},
			"type": "any"
		},
		{
			"id": "ba1b31a7-4792-4306-9e0e-5956866ac542",
			"key": "submissionId",
			"value": "11787e21-4fbe-42b3-8a7c-e15d0c05982e",
			"type": "string"
		},
		{
			"id": "dab3eb63-ed8a-41ff-a2c7-cd43539413fa",
			"key": "operationType",
			"value": "SEAFOOD",
			"type": "string"
		},
		{
			"id": "7ac7b008-2e7a-40d7-82ac-55d87702b19a",
			"key": "operationTypeDisplay",
			"value": "Seafood",
			"type": "string"
		},
		{
			"id": "e03b75bc-6174-4ab6-928d-1b44d17ba06b",
			"key": "submissionStatusId",
			"value": 15,
			"type": "number"
		},
		{
			"id": "81408cd7-4694-4ecd-841a-42faebf24fa2",
			"key": "submissionNoteId",
			"value": 15,
			"type": "number"
		},
		{
			"id": "a32dc57a-2be7-49a5-86c8-cc8652453901",
			"key": "statusNoteId",
			"value": 16,
			"type": "number"
		},
		{
			"id": "123a2455-d97a-4d25-87ff-723ec5adb27f",
			"key": "changedSubmission",
			"value": "{\"submissionId\":\"11787e21-4fbe-42b3-8a7c-e15d0c05982e\",\"formVersionId\":7,\"confirmationId\":\"11787E21\",\"type\":\"SEAFOOD\",\"deleted\":false,\"createdBy\":\"public\",\"createdAt\":\"2020-06-03T23:16:55.625Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:16:55.459Z\",\"operationType\":{\"type\":\"SEAFOOD\",\"display\":\"Seafood\",\"enabled\":true,\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T22:06:37.610Z\"},\"business\":{\"businessId\":9,\"submissionId\":\"11787e21-4fbe-42b3-8a7c-e15d0c05982e\",\"name\":\"ZZ Smoke Testing 2.0\",\"orgBookId\":null,\"addressLine1\":\"1234 Here St\",\"addressLine2\":null,\"city\":\"Saanich\",\"province\":\"BC\",\"postalCode\":\"ABCDEF\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-03T23:16:55.653Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:16:55.459Z\"},\"attestation\":{\"attestationId\":\"21c951ab-d7fb-4fa8-b150-14dc84bd715d\",\"submissionId\":\"11787e21-4fbe-42b3-8a7c-e15d0c05982e\",\"guidelinesRead\":true,\"assessmentCompleted\":true,\"developedPlan\":true,\"protectionSignage\":true,\"workerContactPersonnel\":true,\"commonAreaDistancing\":true,\"sleepingAreaType\":\"SHARED\",\"sharedSleepingPerRoom\":7,\"sharedSleepingDistancing\":true,\"selfIsolateUnderstood\":true,\"selfIsolateAccommodation\":true,\"laundryServices\":true,\"wasteManagementGloves\":true,\"wasteManagementSchedule\":true,\"wasteManagementBags\":true,\"handWashingStations\":true,\"handWashingSoapWater\":true,\"handWashingWaterless\":true,\"handWashingPaperTowels\":true,\"handWashingSignage\":true,\"distancingMaintained\":true,\"distancingFaceShields\":true,\"disinfectingSchedule\":true,\"educationSignage\":true,\"educationContactPersonnel\":true,\"transportationSingleOccupant\":true,\"transportationBusesVans\":true,\"transportationTrucksCars\":true,\"transportationHelicopter\":true,\"transportationTravelPod\":true,\"transportationCleaningDistancing\":true,\"trainingCovid19\":true,\"trainingEtiquette\":true,\"trainingLocations\":true,\"trainingFirstAid\":true,\"trainingReporting\":true,\"mealsDistancing\":true,\"mealsDishware\":true,\"mealsDishwashing\":true,\"infectionSeparation\":true,\"infectionSymptoms\":true,\"infectionHeathLinkBC\":true,\"infectionSanitization\":true,\"infectionAccommodation\":true,\"infectedFeeding\":true,\"infectedHousekeeping\":true,\"infectedWaste\":true,\"certifyAccurateInformation\":true,\"agreeToInspection\":true,\"createdBy\":\"public\",\"createdAt\":\"2020-06-03T23:16:55.653Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:16:55.459Z\"},\"location\":{\"locationId\":9,\"submissionId\":\"11787e21-4fbe-42b3-8a7c-e15d0c05982e\",\"startDate\":\"2020-05-10\",\"endDate\":\"2020-07-30\",\"city\":\"Victoria, TX\",\"cityLatitude\":null,\"cityLongitude\":null,\"mineNumber\":\"0123456\",\"permitNumber\":\"\",\"numberOfWorkers\":10,\"accTents\":true,\"tentDetails\":\"Tents pitched on motel parking lot\",\"accMotel\":true,\"motelName\":\"Heartbreak Hotel\",\"motelAddressLine1\":\"2345 Everywhere\",\"motelAddressLine2\":\"\",\"motelCity\":\"Victoria\",\"motelProvince\":\"BC\",\"motelPostalCode\":\"123123\",\"accWorkersHome\":true,\"licencees\":\"Ministry of Forests\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-03T23:16:55.653Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:16:55.459Z\"},\"contacts\":[{\"contactId\":17,\"submissionId\":\"11787e21-4fbe-42b3-8a7c-e15d0c05982e\",\"contactType\":\"PRIMARY\",\"firstName\":\"Jane\",\"lastName\":\"Doe\",\"phone1\":\"1234567890\",\"phone2\":\"\",\"email\":\"first@contact.ca\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-03T23:16:55.653Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:16:55.459Z\"},{\"contactId\":18,\"submissionId\":\"11787e21-4fbe-42b3-8a7c-e15d0c05982e\",\"contactType\":\"COVID_COORDINATOR\",\"firstName\":\"John\",\"lastName\":\"D'oh\",\"phone1\":\"0987654321\",\"phone2\":\"\",\"email\":\"second@contact.ca\",\"createdBy\":\"public\",\"createdAt\":\"2020-06-03T23:16:55.653Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:16:55.459Z\"}],\"statuses\":[{\"submissionStatusId\":14,\"submissionId\":\"11787e21-4fbe-42b3-8a7c-e15d0c05982e\",\"code\":\"SUBMITTED\",\"assignedTo\":null,\"assignedToEmail\":null,\"actionDate\":null,\"classification\":null,\"createdBy\":\"public\",\"createdAt\":\"2020-06-03T23:16:55.660Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:16:55.459Z\",\"notes\":[],\"statusCode\":{\"code\":\"SUBMITTED\",\"display\":\"Submitted\",\"enabled\":true,\"nextCodes\":[\"ASSIGNED\",\"COMPLETED\"],\"allowedClassifications\":[],\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T22:24:57.250Z\"}}],\"notes\":[]}",
			"type": "string"
		},
		{
			"id": "c29ca29a-9a2c-4c26-88bd-e2ac0ba673b8",
			"key": "changedFormDefinition",
			"value": "{\"formId\":\"8711e9bc-3c2d-44b1-94e6-356f9d0a437e\",\"description\":\"Description updated\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:08:54.896Z\",\"metadata\":{\"formId\":\"8711e9bc-3c2d-44b1-94e6-356f9d0a437e\",\"name\":\"Agriculture/Seafood v2\",\"slug\":\"agriseafoodopscreening\",\"public\":true,\"active\":true,\"keywords\":[\"covid\",\"attestation\",\"attestations\",\"agriculture\",\"seafood\",\"operator\",\"screening\"],\"prefix\":\"agrisea_os\",\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":null,\"updatedAt\":\"2020-06-03T23:08:54.881Z\"},\"versions\":[{\"changes\":\"this is a new version\",\"statusCodes\":[{\"code\":\"A\",\"display\":\"Aa\",\"enabled\":true,\"nextCodes\":[\"B\"],\"allowedClassifications\":[\"Good\",\"Bad\",\"Ugly\"]},{\"code\":\"B\",\"display\":\"Bb\",\"enabled\":true,\"nextCodes\":[\"A\"]}]}],\"formVersionId\":7}",
			"type": "string"
		},
		{
			"id": "14f881a5-1d0a-4c1b-ae38-504b8bbafbfc",
			"key": "confirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":true,\"config\":{\"to\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"from\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"title\":\"Agriculture/Seafood Operator Screening Form Accepted\",\"subject\":\"Agriculture/Seafood Operator Screening Form Accepted\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.pathfinder.gov.bc.ca/app/agriseafoodopscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Agriculture/Seafood Operator Screening Attestation\"},\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:08:55.288Z\"}",
			"type": "string"
		},
		{
			"id": "87be09e1-6a25-4f17-989c-3aebae2a7319",
			"key": "changedConfirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":false,\"config\":{\"to\":\"newem@il.com\",\"from\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"title\":\"Agriculture/Seafood Operator Screening Form Accepted\",\"subject\":\"Ignore this please\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.pathfinder.gov.bc.ca/app/agriseafoodopscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Agriculture/Seafood Operator Screening Attestation\"},\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:08:55.288Z\"}",
			"type": "string"
		},
		{
			"id": "7241c430-65ac-4e9a-8497-806be366c4d7",
			"key": "resetConfirmationEmail",
			"value": "{\"name\":\"confirmationEmail\",\"enabled\":true,\"config\":{\"to\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"from\":\"NR.CommonServiceShowcase@gov.bc.ca\",\"title\":\"Agriculture/Seafood Operator Screening Form Accepted\",\"subject\":\"Agriculture/Seafood Operator Screening Form Accepted\",\"priority\":\"normal\",\"template\":\"confirmation-number-email.html\",\"messageLinkUrl\":\"https://comfort-dev.pathfinder.gov.bc.ca/app/agriseafoodopscreening/admin/submission\",\"messageLinkText\":\"Please login to view the details of this Agriculture/Seafood Operator Screening Attestation\"},\"createdBy\":\"migration-011\",\"createdAt\":\"2020-06-03T22:06:37.610Z\",\"updatedBy\":\"development\",\"updatedAt\":\"2020-06-03T23:08:55.288Z\"}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}